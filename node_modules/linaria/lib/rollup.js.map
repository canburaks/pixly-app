{"version":3,"sources":["../src/rollup.js"],"names":["require","createFilter","transform","slugify","module","exports","linaria","include","exclude","sourceMap","preprocessor","rest","filter","cssLookup","name","load","id","resolveId","importee","code","result","filename","pluginOptions","cssText","slug","replace","cssSourceMapText","map","Buffer","from","toString","JSON","stringify"],"mappings":";;;;;;;;eAKyBA,OAAO,CAAC,oBAAD,C;IAAxBC,Y,YAAAA,Y;;AACR,IAAMC,UAAS,GAAGF,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAAvB;;AAUAI,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,QAMY;AAAA,gCAAJ,EAAI;AAAA,MAL3BC,OAK2B,QAL3BA,OAK2B;AAAA,MAJ3BC,OAI2B,QAJ3BA,OAI2B;AAAA,MAH3BC,SAG2B,QAH3BA,SAG2B;AAAA,MAF3BC,YAE2B,QAF3BA,YAE2B;AAAA,MADxBC,IACwB;;AAC3B,MAAMC,MAAM,GAAGX,YAAY,CAACM,OAAD,EAAUC,OAAV,CAA3B;AACA,MAAMK,SAAS,GAAG,EAAlB;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAE,SADD;AAELC,IAAAA,IAFK,gBAEAC,EAFA,EAEY;AACf,aAAOH,SAAS,CAACG,EAAD,CAAhB;AACD,KAJI;;AAKL;AACAC,IAAAA,SANK,qBAMKC,QANL,EAMuB;AAC1B,UAAIA,QAAQ,IAAIL,SAAhB,EAA2B,OAAOK,QAAP;AAC5B,KARI;AASLhB,IAAAA,SATK,qBASKiB,IATL,EASmBH,EATnB,EAS+B;AAClC,UAAI,CAACJ,MAAM,CAACI,EAAD,CAAX,EAAiB;;AAEjB,UAAMI,MAAM,GAAGlB,UAAS,CAACiB,IAAD,EAAO;AAC7BE,QAAAA,QAAQ,EAAEL,EADmB;AAE7BN,QAAAA,YAAY,EAAIA,YAFa;AAG7BY,QAAAA,aAAa,EAAEX;AAHc,OAAP,CAAxB;;AAMA,UAAI,CAACS,MAAM,CAACG,OAAZ,EAAqB;AATa,UAW5BA,OAX4B,GAWhBH,MAXgB,CAW5BG,OAX4B;AAalC,UAAMC,IAAI,GAAGrB,OAAO,CAACa,EAAD,CAApB;AACA,UAAMK,QAAQ,GAAML,EAAE,CAACS,OAAH,CAAW,OAAX,EAAoB,EAApB,CAAN,SAAiCD,IAAjC,SAAd;;AAEA,UAAIf,SAAS,IAAIW,MAAM,CAACM,gBAAxB,EAA0C;AACxC,YAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYT,MAAM,CAACM,gBAAnB,EAAqCI,QAArC,CAA8C,QAA9C,CAAZ;AACAP,QAAAA,OAAO,2DAAyDI,GAAzD,OAAP;AACD;;AAEDd,MAAAA,SAAS,CAACQ,QAAD,CAAT,GAAsBE,OAAtB;AAEAH,MAAAA,MAAM,CAACD,IAAP,kBAA2BY,IAAI,CAACC,SAAL,CAAeX,QAAf,CAA3B;AAEA;;AACA,aAAO;AAAEF,QAAAA,IAAI,EAAEC,MAAM,CAACD,IAAf;AAAqBQ,QAAAA,GAAG,EAAEP,MAAM,CAACX;AAAjC,OAAP;AACD;AApCI,GAAP;AAsCD,CAhDD","sourcesContent":["/* @flow */\n\nimport type { PluginOptions } from './babel/utils/loadOptions';\nimport type { Preprocessor } from './transform';\n\nconst { createFilter } = require('rollup-pluginutils');\nconst transform = require('./transform');\nconst slugify = require('./slugify');\n\ntype RollupPluginOptions = {\n  include?: string | string[],\n  exclude?: string | string[],\n  sourceMap?: boolean,\n  preprocessor?: Preprocessor,\n  ...$Shape<PluginOptions>,\n};\n\nmodule.exports = function linaria({\n  include,\n  exclude,\n  sourceMap,\n  preprocessor,\n  ...rest\n}: RollupPluginOptions = {}) {\n  const filter = createFilter(include, exclude);\n  const cssLookup = {};\n\n  return {\n    name: 'linaria',\n    load(id: string) {\n      return cssLookup[id];\n    },\n    /* eslint-disable-next-line consistent-return */\n    resolveId(importee: string) {\n      if (importee in cssLookup) return importee;\n    },\n    transform(code: string, id: string) {\n      if (!filter(id)) return;\n\n      const result = transform(code, {\n        filename: id,\n        preprocessor: ((preprocessor: any): Preprocessor),\n        pluginOptions: rest,\n      });\n\n      if (!result.cssText) return;\n\n      let { cssText } = result;\n\n      const slug = slugify(id);\n      const filename = `${id.replace(/\\.js$/, '')}_${slug}.css`;\n\n      if (sourceMap && result.cssSourceMapText) {\n        const map = Buffer.from(result.cssSourceMapText).toString('base64');\n        cssText += `/*# sourceMappingURL=data:application/json;base64,${map}*/`;\n      }\n\n      cssLookup[filename] = cssText;\n\n      result.code += `\\nimport ${JSON.stringify(filename)};\\n`;\n\n      /* eslint-disable-next-line consistent-return */\n      return { code: result.code, map: result.sourceMap };\n    },\n  };\n};\n"],"file":"rollup.js"}