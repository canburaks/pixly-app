{"version":3,"sources":["../../../src/babel/utils/toCSS.js"],"names":["hyphenate","s","replace","match","p1","toLowerCase","toCSS","o","Array","isArray","map","join","Object","entries","filter","value","key","unitless","p2","p3"],"mappings":";;;;;;;;;AAEA;;AACA;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD;AAAA,SAChBA,CAAC,CACC;AADD,GAEEC,OAFH,CAEW,UAFX,EAEuB,UAACC,KAAD,EAAQC,EAAR;AAAA,iBAAmBA,EAAE,CAACC,WAAH,EAAnB;AAAA,GAFvB,EAGE;AAHF,GAIGH,OAJH,CAIW,MAJX,EAImB,MAJnB,CADgB;AAAA,CAAlB;;AAaA;AACA;AACe,SAASI,KAAT,CAAeC,CAAf,EAAiC;AAC9C,MAAIC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAJ,EAAsB;AACpB,WAAOA,CAAC,CAACG,GAAF,CAAMJ,KAAN,EAAaK,IAAb,CAAkB,IAAlB,CAAP;AACD;;AAED,SAAOC,MAAM,CAACC,OAAP,CAAeN,CAAf,EACJO,MADI,CAEH;AAAA,QAAIC,KAAJ;AAAA,WACE;AACA,aAAOA,KAAP,KAAiB,QAAjB,IAA6BA;AAF/B;AAAA,GAFG,EAMJL,GANI,CAMA,iBAAkB;AAAA,QAAhBM,GAAgB;AAAA,QAAXD,KAAW;;AACrB,QAAI,6BAAeA,KAAf,CAAJ,EAA2B;AACzB,aAAUC,GAAV,WAAmBV,KAAK,CAAES,KAAF,CAAxB;AACD;;AAED,WAAUf,SAAS,CAACgB,GAAD,CAAnB;AACE;AACA,WAAOD,KAAP,KAAiB,QAAjB,IACAA,KAAK,KAAK,CADV,IAEA,CAACE,gBACC;AACAD,IAAAA,GAAG,CAACd,OAAJ,CACE,gCADF,EAEE,UAACC,KAAD,EAAQC,EAAR,EAAYc,EAAZ,EAAgBC,EAAhB;AAAA,kBAA0BD,EAAE,CAACb,WAAH,EAA1B,GAA6Cc,EAA7C;AAAA,KAFF,CAFD,CAFD,GASOJ,KATP,UAUIA,KAZN;AAcD,GAzBI,EA0BJJ,IA1BI,CA0BC,GA1BD,CAAP;AA2BD","sourcesContent":["/* @flow */\n\nimport isSerializable from './isSerializable';\nimport { unitless } from '../units';\n\nconst hyphenate = (s: string) =>\n  s\n    // Hyphenate CSS property names from camelCase version from JS string\n    .replace(/([A-Z])/g, (match, p1) => `-${p1.toLowerCase()}`)\n    // Special case for `-ms` because in JS it starts with `ms` unlike `Webkit`\n    .replace(/^ms-/, '-ms-');\n\ntype CSSProperties =\n  | CSSProperties[]\n  | {\n      [key: string]: string | number | CSSProperties,\n    };\n\n// Some tools such as polished.js output JS objects\n// To support them transparently, we convert JS objects to CSS strings\nexport default function toCSS(o: CSSProperties) {\n  if (Array.isArray(o)) {\n    return o.map(toCSS).join('\\n');\n  }\n\n  return Object.entries(o)\n    .filter(\n      ([, value]) =>\n        // Ignore all falsy values except numbers\n        typeof value === 'number' || value\n    )\n    .map(([key, value]) => {\n      if (isSerializable(value)) {\n        return `${key} { ${toCSS((value: any))} }`;\n      }\n\n      return `${hyphenate(key)}: ${\n        /* $FlowFixMe */\n        typeof value === 'number' &&\n        value !== 0 &&\n        !unitless[\n          // Strip vendor prefixes when checking if the value is unitless\n          key.replace(\n            /^(Webkit|Moz|O|ms)([A-Z])(.+)$/,\n            (match, p1, p2, p3) => `${p2.toLowerCase()}${p3}`\n          )\n        ]\n          ? `${value}px`\n          : value\n      };`;\n    })\n    .join(' ');\n}\n"],"file":"toCSS.js"}