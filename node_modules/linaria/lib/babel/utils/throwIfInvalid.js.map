{"version":3,"sources":["../../../src/babel/utils/throwIfInvalid.js"],"names":["throwIfInvalid","value","ex","Number","isFinite","stringified","JSON","stringify","String","buildCodeFrameError","node","code"],"mappings":";;;;;;;;;AAEA;;AACA;;;;AAEA;AACe,SAASA,cAAT,CAAwBC,KAAxB,EAAoCC,EAApC,EAA6C;AAC1D,MACE,OAAOD,KAAP,KAAiB,UAAjB,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEC,OAAOA,KAAP,KAAiB,QAAjB,IAA6BE,MAAM,CAACC,QAAP,CAAgBH,KAAhB,CAF9B,IAGA,6BAAeA,KAAf,CAJF,EAKE;AACA;AACD;;AAED,MAAMI,WAAW,GACf,OAAOJ,KAAP,KAAiB,QAAjB,GAA4BK,IAAI,CAACC,SAAL,CAAeN,KAAf,CAA5B,GAAoDO,MAAM,CAACP,KAAD,CAD5D;AAGA,QAAMC,EAAE,CAACO,mBAAH,mCAC4BJ,WAD5B,mJAEF,wBAAUH,EAAE,CAACQ,IAAb,EAAmBC,IAFjB,SAAN;AAKD","sourcesContent":["/* @flow */\n\nimport generator from '@babel/generator';\nimport isSerializable from './isSerializable';\n\n// Throw if we can't handle the interpolated value\nexport default function throwIfInvalid(value: any, ex: any) {\n  if (\n    typeof value === 'function' ||\n    typeof value === 'string' ||\n    (typeof value === 'number' && Number.isFinite(value)) ||\n    isSerializable(value)\n  ) {\n    return;\n  }\n\n  const stringified =\n    typeof value === 'object' ? JSON.stringify(value) : String(value);\n\n  throw ex.buildCodeFrameError(\n    `The expression evaluated to '${stringified}', which is probably a mistake. If you want it to be inserted into CSS, explicitly cast or transform the value to a string, e.g. - 'String(${\n      generator(ex.node).code\n    })'.`\n  );\n}\n"],"file":"throwIfInvalid.js"}