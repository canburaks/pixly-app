{"version":3,"sources":["../../src/babel/module.js"],"names":["NativeModule","require","vm","fs","path","process","builtins","assert","buffer","child_process","cluster","console","constants","crypto","dgram","dns","domain","events","http","https","module","net","os","punycode","querystring","readline","repl","stream","string_decoder","sys","timers","tls","tty","url","util","zlib","cache","NOOP","Module","filename","Object","defineProperties","id","value","writable","paths","freeze","_nodeModulePaths","dirname","exports","bind","resolve","ensure","extensions","_extensions","added","forEach","ext","push","_resolveFilename","isAbsolute","Error","dependencies","m","transform","includes","extname","code","readFileSync","test","JSON","parse","evaluate","text","script","Script","runInContext","createContext","global","__filename","__dirname","invalidate","options"],"mappings":"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","sourcesContent":["/**\n * This is a custom implementation for the module system for evaluating code.\n *\n * This serves 2 purposes:\n * - Avoid leakage from evaled code to module cache in current context, e.g. `babel-register`\n * - Allow us to invalidate the module cache without affecting other stuff, necessary for rebuilds\n *\n * We also use it to transpile the code with Babel by default.\n * We also store source maps for it to provide correct error stacktraces.\n *\n * @flow\n */\n\n/* $FlowFixMe */\nconst NativeModule = require('module');\nconst vm = require('vm');\nconst fs = require('fs');\nconst path = require('path');\nconst process = require('./process');\n\n// Supported node builtins based on the modules polyfilled by webpack\n// `true` means module is polyfilled, `false` means module is empty\nconst builtins = {\n  assert: true,\n  buffer: true,\n  child_process: false,\n  cluster: false,\n  console: true,\n  constants: true,\n  crypto: true,\n  dgram: false,\n  dns: false,\n  domain: true,\n  events: true,\n  fs: false,\n  http: true,\n  https: true,\n  module: false,\n  net: false,\n  os: true,\n  path: true,\n  punycode: true,\n  process: true,\n  querystring: true,\n  readline: false,\n  repl: false,\n  stream: true,\n  string_decoder: true,\n  sys: true,\n  timers: true,\n  tls: false,\n  tty: true,\n  url: true,\n  util: true,\n  vm: true,\n  zlib: true,\n};\n\n// Separate cache for evaled modules\nlet cache = {};\n\nconst NOOP = () => {};\n\nclass Module {\n  static invalidate: () => void;\n\n  static _resolveFilename: (\n    id: string,\n    options: { id: string, filename: string, paths: string[] }\n  ) => string;\n\n  id: string;\n\n  filename: string;\n\n  paths: string[];\n\n  require: (id: string) => any;\n\n  exports: any;\n\n  extensions: string[];\n\n  dependencies: ?(string[]);\n\n  transform: ?(text: string) => { code: string };\n\n  constructor(filename: string) {\n    Object.defineProperties(this, {\n      id: {\n        value: filename,\n        writable: false,\n      },\n      filename: {\n        value: filename,\n        writable: false,\n      },\n      paths: {\n        value: Object.freeze(\n          NativeModule._nodeModulePaths(path.dirname(filename))\n        ),\n        writable: false,\n      },\n    });\n\n    this.exports = {};\n    this.require = this.require.bind(this);\n    this.require.resolve = this.resolve.bind(this);\n    this.require.ensure = NOOP;\n    this.require.cache = cache;\n\n    // We support following extensions by default\n    this.extensions = ['.json', '.js', '.jsx', '.ts', '.tsx'];\n  }\n\n  resolve(id: string) {\n    const extensions = NativeModule._extensions;\n    const added = [];\n\n    try {\n      // Check for supported extensions\n      this.extensions.forEach(ext => {\n        if (ext in extensions) {\n          return;\n        }\n\n        // When an extension is not supported, add it\n        // And keep track of it to clean it up after resolving\n        // Use noop for the tranform function since we handle it\n        extensions[ext] = NOOP;\n        added.push(ext);\n      });\n\n      return Module._resolveFilename(id, this);\n    } finally {\n      // Cleanup the extensions we added to restore previous behaviour\n      added.forEach(ext => delete extensions[ext]);\n    }\n  }\n\n  require(id: string) {\n    if (id in builtins) {\n      // The module is in the allowed list of builtin node modules\n      // Ideally we should prevent importing them, but webpack polyfills some\n      // So we check for the list of polyfills to determine which ones to support\n      if (builtins[id]) {\n        /* $FlowFixMe */\n        return require(id);\n      }\n\n      return null;\n    }\n\n    // Resolve module id (and filename) relatively to parent module\n    const filename = this.resolve(id);\n\n    if (filename === id && !path.isAbsolute(id)) {\n      // The module is a builtin node modules, but not in the allowed list\n      throw new Error(\n        `Unable to import \"${id}\". Importing Node builtins is not supported in the sandbox.`\n      );\n    }\n\n    this.dependencies && this.dependencies.push(id);\n\n    let m = cache[filename];\n\n    if (!m) {\n      // Create the module if cached module is not available\n      m = new Module(filename);\n      m.transform = this.transform;\n\n      // Store it in cache at this point with, otherwise\n      // we would end up in infinite loop with cyclic dependencies\n      cache[filename] = m;\n\n      if (this.extensions.includes(path.extname(filename))) {\n        // To evaluate the file, we need to read it first\n        const code = fs.readFileSync(filename, 'utf-8');\n\n        if (/\\.json$/.test(filename)) {\n          // For JSON files, parse it to a JS object similar to Node\n          m.exports = JSON.parse(code);\n        } else {\n          // For JS/TS files, evaluate the module\n          // The module will be transpiled using provided transform\n          m.evaluate(code);\n        }\n      } else {\n        // For non JS/JSON requires, just export the id\n        // This is to support importing assets in webpack\n        // The module will be resolved by css-loader\n        m.exports = id;\n      }\n    }\n\n    return m.exports;\n  }\n\n  evaluate(text: string) {\n    // For JavaScript files, we need to transpile it and to get the exports of the module\n    const code = this.transform ? this.transform(text).code : text;\n\n    const script = new vm.Script(code, {\n      filename: this.filename,\n    });\n\n    script.runInContext(\n      vm.createContext({\n        global,\n        process,\n        module: this,\n        exports: this.exports,\n        require: this.require,\n        __filename: this.filename,\n        __dirname: path.dirname(this.filename),\n      })\n    );\n  }\n}\n\nModule.invalidate = () => {\n  cache = {};\n};\n\n// Alias to resolve the module using node's resolve algorithm\n// This static property can be overriden by the webpack loader\n// This allows us to use webpack's module resolution algorithm\nModule._resolveFilename = (id, options) =>\n  NativeModule._resolveFilename(id, options);\n\nmodule.exports = Module;\n"],"file":"module.js"}